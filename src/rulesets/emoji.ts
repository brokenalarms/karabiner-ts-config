import { duoLayer, ifApp, map, to$, toKey, toPaste, withCondition, withMapper } from "karabiner.ts"
import { LayerConfig } from "../config/layout_mappings"

export function layer_emojiAndSnippet({ layerLocation, location }: LayerConfig) {
  // See https://gitmoji.dev/
  let emojiMap = {
    b: 'üêõ', // Fix a bug
    c: 'üìÖ', // _calendar
    d: 'üìù', // add or update Documentation
    f: 'üö©', // add, update, or remove Feature Flags
    h: 'üíØ', // _hundred
    j: 'üòÇ', // _joy
    m: 'üîÄ', // Merge branches
    n: '‚ú®', // introduce New features
    p: 'üëç', // _plus_one +1
    r: '‚ôªÔ∏è', // Refactor code
    s: 'üòÖ', // _sweat_smile
    t: 'üßµ', // _thread
    u: 'üíÑ', // UI/Style
    v: 'üîñ', // release / Version tags
  }

  let emojiHint = Object.entries(emojiMap)
    .slice(0, 15)
    .reduce(
      (r, [k, v]) => [r[0].concat(v), r[1].concat(k.toUpperCase())],
      [[] as string[], [] as string[]],
    )
    .map((v, i) => v.join(i === 0 ? ' ' : '    '))
    .join('\n')

  let layer = duoLayer(layerLocation.z, layerLocation.x).notification(emojiHint)
  return layer.manipulators([
    map(location.slash).to(raycastExt('raycast/emoji-symbols/search-emoji-symbols')),

    withMapper(emojiMap)((k, v) => map(k).toPaste(v)),

    { 2: toPaste('‚å´'), 3: toPaste('‚å¶'), 4: toPaste('‚á•'), 5: toPaste('‚éã') },
    { 6: toPaste('‚åò'), 7: toPaste('‚å•'), 8: toPaste('‚åÉ'), 9: toPaste('‚áß') },
    { 0: toPaste('‚á™'), ',': toPaste('‚Äπ'), '.': toPaste('‚Ä∫') },

    withMapper(['‚Üê', '‚Üí', '‚Üë', '‚Üì', '‚ê£', '‚èé', '‚å´', '‚å¶'])((k) =>
      map(k).toPaste(k),
    ),

    // Code snippets
    withCondition(ifApp('^com.microsoft.VSCode$'))([
      map('k').to('f20').to('k'),
      map('l').to('f20').to('l'),
    ]),
    withCondition(ifApp('^com.jetbrains.WebStorm$'))([
      map('k').toTypeSequence('afun'),
    ]),
    map('k').toTypeSequence('()‚ê£=>‚ê£'),
    map('l').toTypeSequence('console.log()‚Üê'),
    map('o').toTypeSequence('console.assert()‚Üê'),
    map('/').toTypeSequence('cn()‚Üê'),

    map("'").toTypeSequence('‚å´"'),
    map('[').toTypeSequence('[‚ê£]‚ê£'),
    map(']').toTypeSequence('-‚ê£[‚ê£]‚ê£'),

    { "'": toKey('‚å´'), '\\': toKey('‚å¶') },
  ])
}


export function raycastExt(name: string) {
  return to$(`open raycast://extensions/${name}`)
}